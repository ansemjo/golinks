// Code generated by go-bindata.
// sources:
// .build/assets/close.svg
// .build/assets/edit.html
// .build/assets/edit.js
// .build/assets/links.html
// .build/assets/style.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _closeSvg = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xc1\x8a\x84\x30\x0c\x86\x5f\x25\xe4\xbe\x69\x9b\x62\xcd\x2e\xd6\xc3\x9e\xdd\x87\x58\x50\x5a\xc1\x19\x65\x2c\x56\xe6\xe9\x87\x56\x2f\x3f\xe1\xfb\xbf\x84\x74\xfb\x11\xe0\x7c\x2c\xcf\xdd\x63\x4c\x69\xfb\x51\x2a\xe7\x4c\xd9\xd2\xfa\x0a\x8a\xb5\xd6\x6a\x3f\x02\x42\x9e\xc7\x14\x3d\x5a\x87\x10\xa7\x39\xc4\x74\xcd\xc7\x3c\xe5\xdf\xf5\xf4\xa8\x41\x83\x75\x60\x1d\xf6\xdd\xf6\x9f\x22\x8c\x1e\xff\x58\xa8\x81\x6f\x72\x3c\xb0\x23\x2b\xd0\x52\x03\x46\xc0\x34\x24\x52\x79\x25\xed\x2d\xdd\xdc\x5c\x5e\xdd\x58\x98\x0c\x43\x89\xc1\x08\xb0\x26\xc3\x8b\x94\x4b\x35\x0a\xff\xaa\x65\x6d\xc0\xc8\x1b\x55\xdf\x95\x87\xfb\x4f\x00\x00\x00\xff\xff\xe5\x79\xbd\x91\xd8\x00\x00\x00"

func closeSvgBytes() ([]byte, error) {
	return bindataRead(
		_closeSvg,
		"close.svg",
	)
}

func closeSvg() (*asset, error) {
	bytes, err := closeSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "close.svg", size: 216, mode: os.FileMode(420), modTime: time.Unix(1562268585, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x3f\x4f\xc3\x30\x10\xc5\xf7\x7e\x8a\xe3\xf6\xd6\x2b\x12\x76\x96\x52\x31\xc2\xd0\x85\x31\xb5\x2f\xb2\xc1\x89\xcd\xf9\x52\x91\x6f\x8f\x62\x97\x12\xa6\xdc\x3f\xfd\xde\xcb\xb3\x7e\x78\x7e\x3d\x9e\xdf\xdf\x4e\xe0\x65\x8c\xdd\x4e\xb7\x0f\x80\xf6\xd4\xbb\xb5\x00\xd0\x12\x24\x52\xf7\x92\xb4\x6a\x55\x9b\x8e\x24\x3d\x78\x91\xbc\xa7\xaf\x39\x5c\x0d\x1e\xd3\x24\x34\xc9\xfe\xbc\x64\x42\xb0\xad\x33\x28\xf4\x2d\x6a\xc5\x3e\x81\xf5\x3d\x17\x12\x33\xcb\xb0\x7f\x44\x75\x03\xc5\x30\x7d\x82\x67\x1a\x0c\xaa\xa2\x8a\x2c\x91\x0e\xb6\x14\x04\xa6\x68\xb0\xf6\xc5\x13\x09\x82\x2c\x99\x6e\xc0\xf5\xa0\xfa\x54\xbf\x46\xf5\x25\xb9\xe5\x86\x1c\x12\x8f\xd0\xcf\x92\x6c\x1a\x73\x24\x21\x83\x69\x18\xb0\x6d\x01\xb4\x0b\x57\x08\xce\xe0\xa5\xe7\xfb\x70\x33\xb6\xb1\x60\xa7\x95\x0b\xd7\xcd\x32\x4c\x79\x96\x8d\x05\xac\xa7\x33\x47\x84\x1c\x7b\x4b\x3e\x45\x47\x6c\xf0\x34\x09\x31\x88\x27\x98\x39\x82\x24\x28\x3e\xb1\xd0\xb4\x12\x2b\xe3\xee\x62\x2b\xf0\xa7\x3d\xe6\x7f\xda\x5a\xad\x3f\xd3\xed\x5a\x53\x2c\x87\x2c\x50\xd8\xd6\xb0\xc8\x05\x39\x7c\x54\xb3\x6d\xd3\x22\x69\x49\x68\xd5\x1e\xf3\x27\x00\x00\xff\xff\x4b\xbc\xcf\xbd\xe4\x01\x00\x00"

func editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_editHtml,
		"edit.html",
	)
}

func editHtml() (*asset, error) {
	bytes, err := editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.html", size: 484, mode: os.FileMode(420), modTime: time.Unix(1562268594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _editJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x51\x53\xdb\xb8\x13\x7f\xe7\x53\x50\xfd\x67\x18\x69\x10\x0a\xb4\x2f\x1d\xfc\xf7\x30\x94\xe6\xae\x73\xd3\x1e\x1d\xe0\xe1\x6e\x7a\x7d\x58\x5b\x6b\x5b\x87\x22\x19\x49\x86\xe4\x12\x7f\xf7\x1b\xd9\x4e\x70\x20\x94\xeb\x43\x3c\x92\x76\xf5\xdb\x5d\xed\x6f\x77\x73\x0f\x6e\x5f\xda\x59\x42\x8b\xc6\xe4\x41\x59\x43\x73\xb6\xcc\xc5\x5d\xba\xd9\x67\x6c\xe9\x30\x34\xce\xec\x4b\x9b\x37\x33\x34\x41\xdc\x35\xe8\x16\xd7\xa8\x31\x0f\xd6\xd1\x8c\xb5\x49\x2e\xee\xe0\xbf\x5f\x39\xd7\x7a\xb8\x95\xff\xf0\x52\xee\x10\x02\x4e\x35\xc6\xdd\xfa\x86\xf7\xa3\x3b\x1c\xb8\x64\xcb\x4c\xf8\xb0\xd0\x28\x3c\x86\xaf\xce\xd6\xe8\xc2\x82\x02\x97\x9c\x10\xd6\xb6\x8c\x4a\x3b\x5b\xad\xe2\x37\x5d\xb6\x8c\x25\x31\xe4\x79\xe5\x92\xbd\xad\x98\xe3\x69\xf6\x88\xcc\x96\xeb\xe5\x3e\x50\xd9\x8b\x21\x0d\x95\xf2\x49\xfc\x88\x79\xe5\x52\xd9\x2f\xa5\x35\xf8\x8b\xf1\xe9\xb7\xef\xfd\x1e\x9d\xb3\x6e\x38\x90\xc2\x1a\x6d\x41\x8e\x81\x7b\x4b\x52\x38\xf4\xb5\x35\x1e\x6f\x70\x1e\x78\x9e\x4a\xe1\x03\x84\xc6\x27\xb0\x46\x14\x85\x75\x53\xc8\xab\x47\x3f\x81\x2d\x81\x66\x3c\x67\x2d\x6b\x3b\xec\xce\xd6\x18\x1c\x36\xe6\x77\xde\x1e\x5e\x18\x68\x44\x68\x41\xd4\xce\x06\x1b\x16\x35\x0a\x6b\x3e\x5a\x83\xe9\x58\x79\x1c\x9d\xa8\x1b\x5f\x51\x60\xc9\x80\x10\x65\x6d\xb2\x0d\x30\xdd\x76\x66\x8d\xb0\x71\xe8\x55\x88\x07\x15\xaa\x4f\x08\x12\xc7\x28\x3c\x1b\x70\xe6\x95\x8b\x19\xbe\xc2\xbb\x06\x7d\xe8\xf5\x3a\xf1\xcb\x80\x1e\x8d\xfc\xed\xfa\xf2\xf7\xe7\x4e\x3d\x9a\xa2\xe4\xc2\x9a\x80\x26\x1c\xdd\x2c\x6a\x24\x7c\x8f\x40\x5d\x6b\x95\x43\xd4\x9f\xfc\xed\xad\x49\xf2\x0a\x9c\xc7\x90\x36\xa1\x78\x4f\x58\x32\xf2\xc6\x48\x1a\xf1\x85\x0f\x4e\x99\x52\x15\x0b\x0a\xec\x15\x7f\x9e\xfb\xb2\x81\x7a\xfa\x36\xeb\x6c\xb5\x94\x25\xb9\xb8\xc2\xbb\x34\x8b\x15\xd0\x55\xc5\xf8\x85\x06\xfa\xca\xd4\xe0\xc3\xfe\x1f\x5f\x3e\x7f\x0a\xa1\x1e\x9e\x29\xb2\xa4\xc6\x4e\x89\xbf\x39\xde\xe0\x47\xc5\x8c\xca\xae\xa2\x4a\x0c\xe9\x0e\x8e\xac\x0d\x51\xf2\xeb\xf4\x86\x70\xe8\x74\x6b\xeb\x5f\x51\xfe\x7a\x79\xdd\x6b\xb7\x8c\xce\x2b\xb7\x5a\xc5\xef\x63\xe1\x95\xf6\xb5\xba\xeb\x2b\xad\x8c\x6e\x7d\xb0\x8d\x91\xca\x94\x17\x5a\xa1\x09\x57\x98\x07\xca\x12\x69\x67\xb1\x09\xd0\x92\x93\x19\xb8\x52\x99\xa3\x60\x6b\xc2\x1f\x94\x91\xf6\x41\x28\x63\xd0\x7d\x42\x55\x56\x61\xf2\xee\x08\x44\xd5\x2f\xdf\x1e\x92\x7a\x4e\x58\xcb\xe1\xb9\x29\x5a\x88\x7b\xd0\x0d\xae\x56\x84\x30\x11\x9c\x9a\x51\x96\xc0\x9b\x74\x76\x70\x40\x67\x29\xf0\x5b\xca\x38\x9c\x55\x22\xd7\xe0\xfd\x67\xe5\x83\x00\x29\x29\xb9\x57\x9e\xb0\xd3\xf1\xb1\xc3\x99\xbd\xc7\x41\xc2\x5a\xbe\x9d\xea\xc8\x03\xbc\x47\x13\x3e\x62\x01\x8d\x8e\xa1\x40\xaa\x6d\xcf\x33\x51\x43\xa8\x0c\xcc\x50\xf8\x26\xeb\xc9\x44\x4f\x98\xf0\xb5\x56\x81\x92\x09\x61\xdf\x4e\xbe\x27\xfd\x53\xed\x74\x37\x52\x28\xe6\x86\x92\x09\xd4\x6a\xd2\x38\x3d\x21\x87\xc0\x36\x05\x40\x97\x8d\xd3\xa7\x59\xcb\x86\x3a\xa7\xdb\xf5\x05\x69\xc7\xe2\x3a\xd2\x3c\xb2\x10\x84\xbd\x3d\xa3\x90\x82\x70\xb6\x09\xc8\xce\x68\x96\x82\x88\xfe\x45\xab\x1c\x44\xe3\xf4\xc1\x01\xad\x94\x0f\xd6\x2d\x84\xc3\x5a\x43\x8e\xd7\x21\x32\x60\xd9\x72\xd3\x68\xcd\xc9\x04\xa5\x0a\x13\x72\x98\x31\x9e\x3d\x06\x6a\x9d\x2a\x95\x39\xdc\x23\x51\xc2\x51\x04\x9c\x87\xa1\x00\x53\x42\x38\xee\x78\xcf\xa2\xc9\x6f\x09\xdb\x12\x75\x19\xd0\xca\xc4\x73\x48\x3b\x4a\x50\x02\x71\x13\x5b\xc4\x79\x08\x4e\x65\x4d\xa4\x63\xe5\xb0\x20\x3c\x8b\x82\xb1\xa5\x68\x19\xea\x1a\x8d\xbc\xa8\x94\x8e\x95\xc7\xb3\x35\x8c\xaf\xc1\x10\xc6\xb3\xa7\xe6\x2a\x13\xba\xe3\x31\xce\xf1\xff\x53\x03\xf7\xaa\x84\x60\x9d\x68\x3c\xba\xf3\x32\x0e\x2e\x65\x24\xce\x2f\x0b\x4a\xbe\x40\xae\x4c\xb0\xbe\x22\xec\x8c\xfc\xd5\xbc\x7d\x77\xf2\xfe\xe8\x82\x9c\x92\x8b\xe0\xf4\xd1\x05\x79\xe2\x45\xc6\xf8\x9a\xdd\xc8\x49\x70\x60\x7c\x61\xdd\x8c\x70\xe2\x73\xd0\xf8\x27\x3d\x61\x84\xf1\x12\x43\x3f\x48\x3b\x12\xc7\x78\x3f\x80\xc7\x73\x23\xa7\xf3\xe8\x13\x05\x7e\xcc\x81\x9f\x30\xc6\x4e\x6f\x29\x3b\xd5\x74\x98\x09\xb1\xe5\x73\xf3\x7c\x12\xfd\x14\x07\x77\xb2\x6f\x38\x4b\x09\x49\x80\xb2\x44\x15\x34\x63\x91\x91\xeb\x9e\xf0\x71\xfa\x79\x7a\x33\x25\x7c\x4c\xce\xbd\xac\x67\x27\xfd\x09\x4a\xae\x56\xdb\xc1\xdc\x8e\x83\xf9\xf1\xcb\x1d\xb3\x58\xfd\x7a\xab\x22\x9f\x92\x2f\xd9\x45\xbe\x9e\x64\xc9\x33\xf2\xf5\xa4\x1c\x6a\x72\x8b\x39\xc9\x36\x45\xc8\xf4\xea\xea\xf2\xea\x74\x9f\x1c\x42\xf2\x34\xdd\xc9\xeb\xe9\x6e\x79\xd9\xc1\xdf\x51\xd2\x09\x19\xc7\xf5\xfe\x7f\xf9\xac\x26\x8c\x57\x8f\x7b\xed\x09\xe3\xc5\x66\xdf\x38\x4d\x18\x1f\xff\xb9\x63\xcb\x8c\xb2\x64\xe8\x95\x20\xe5\x34\x36\xa4\x18\x14\x9a\x38\x09\x1d\x7a\xf5\x0f\x12\x9e\xf1\x37\x27\x2c\x29\x77\x68\xf8\x26\x9b\xa9\x40\xb8\xec\x34\x8a\x1d\x1a\xb7\xb8\x68\x6a\xc2\xe1\x45\x85\x1a\x7c\x88\x73\xf6\x65\x8d\xbc\x02\x53\xe2\x1a\xa3\xda\xa5\xa1\x55\x7e\x4b\xb8\xe9\x14\x62\x0e\xf2\x9f\xa3\xb1\x2a\x68\xde\x51\xb4\xc4\xed\x9e\x99\xbf\xc8\xca\xf8\xb7\x6b\x99\x8d\x59\x99\xb1\xe4\xed\xf1\x71\x9a\xe6\x07\x07\xeb\xb2\x48\xb3\xbe\x63\xc6\x06\xd9\xb5\xca\x42\x14\x36\x6f\x7c\x1c\x21\x94\xb1\x96\x25\xa8\x3d\xee\x6f\x4e\x5b\xd6\xfd\x4a\xbb\x5a\xd1\xd2\xf6\x63\x72\xef\xdf\x00\x00\x00\xff\xff\x55\x24\x10\x3b\x94\x0b\x00\x00"

func editJsBytes() ([]byte, error) {
	return bindataRead(
		_editJs,
		"edit.js",
	)
}

func editJs() (*asset, error) {
	bytes, err := editJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "edit.js", size: 2964, mode: os.FileMode(420), modTime: time.Unix(1562268594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _linksHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6b\xeb\x30\x10\xbc\xe7\x57\xec\x13\x39\x3e\x67\xc9\xed\x91\x27\x09\x4a\x5a\x7a\x09\xb4\x94\xf4\xd0\xa3\x62\x6f\x22\x61\xc5\x4e\xa5\xb5\xa9\x31\xfe\xef\xc5\x91\x43\x93\xdc\xaa\x8b\xd8\x8f\x19\xcd\x0c\x92\x7f\x1e\x5f\xd6\xdb\x8f\xd7\x27\xb0\x7c\xf4\x7a\x26\x2f\x17\x99\x42\xcf\x00\x00\x24\x3b\xf6\xa4\x9f\x6b\x58\xad\xe0\x21\x67\xd7\x12\x6c\x5c\x55\x46\x89\x69\x92\xb6\x8e\xc4\x06\x2c\xf3\x29\xa3\xcf\xc6\xb5\x4a\xac\xeb\x8a\xa9\xe2\x6c\xdb\x9d\x48\x40\x9e\x2a\x25\x98\xbe\x18\xc7\x47\xfe\x43\x6e\x4d\x88\xc4\xaa\xe1\x7d\xf6\x4f\xe0\x44\xe4\x5d\x55\x82\x0d\xb4\x57\x02\x23\x46\xee\x3c\x2d\xf2\x18\x05\x04\xf2\x4a\x9c\xeb\x68\x89\x58\xe8\x99\xc4\x24\x53\xee\xea\xa2\x9b\xe0\x85\x6b\x21\xf7\x26\x46\x25\x46\xa6\x28\x52\xff\x3c\xb3\x4b\x3d\x19\xf0\xc9\x80\x5d\x5e\x4d\x1b\xff\x53\x8c\xa7\xef\x21\x98\xea\x40\x30\x2f\xa9\xfb\x0b\xf3\x50\x37\x4c\xb0\x52\xb0\x80\x61\xb8\xd9\x94\xde\xdd\x42\xcf\x4d\x33\xb9\xe8\xfb\x09\xbb\x78\x7f\xdb\xc0\x30\x08\x7d\xa8\x71\x6c\x96\xd4\xc1\x30\x48\x34\x5a\xee\x02\xe0\x6f\x28\x2e\x16\xf7\x8d\xf7\x59\x13\xbc\xd0\xf7\x2b\x23\xed\xad\x48\xbc\x57\xd9\xf7\x40\x55\x71\x6d\x46\xe2\x25\x04\x89\x85\x6b\xc7\x84\x53\xb4\x12\xd3\xbf\xf8\x0e\x00\x00\xff\xff\xce\x93\x5c\xea\x2f\x02\x00\x00"

func linksHtmlBytes() ([]byte, error) {
	return bindataRead(
		_linksHtml,
		"links.html",
	)
}

func linksHtml() (*asset, error) {
	bytes, err := linksHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "links.html", size: 559, mode: os.FileMode(420), modTime: time.Unix(1562268594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xdd\x6e\xa3\x38\x14\xc7\xef\xf7\x29\xac\xc9\x4d\x2b\xc5\x8c\x93\xb4\xe9\xc4\x96\xf6\x3d\xf6\xd2\x98\x03\x58\x35\x3e\x96\x3f\x52\x52\x94\x77\x5f\x01\x26\xa1\x9b\x59\x75\x84\x12\x81\xfd\xe3\x7c\xfc\xcf\xdf\x94\x58\x5d\x86\x52\xaa\xf7\xc6\x63\xb2\x15\xdf\xd4\x75\x2d\x6a\xb4\x91\xd6\xb2\xd3\xe6\xc2\x83\xb4\x81\x06\xf0\x3a\x2f\x07\xfd\x09\xfc\x65\xef\xfa\xf9\xf1\x03\x74\xd3\x46\x7e\x60\xec\x5a\xa3\xef\x86\x08\x7d\xa4\xd2\xe8\xc6\x72\x05\x36\x82\xbf\x6e\x4a\xe9\x87\x0f\x5d\xc5\x96\x1f\x5f\xc7\xf7\x3a\xe9\x1b\x6d\x39\x23\x32\x45\x14\x0e\x83\x8e\x1a\x2d\xf7\x60\x64\xd4\x67\xb8\x6e\x92\x37\xc3\xb7\x25\x1c\x7e\x53\x82\xc8\x69\x18\x73\xbd\x70\xb2\xaa\xb4\x6d\xf8\xfe\xd5\xf5\x42\xa1\x41\xcf\x37\xa7\xd3\x49\x94\xe8\x2b\xf0\xd4\xcb\x4a\xa7\xc0\x5f\x5c\x9f\x57\xf8\xce\xf5\x24\xa0\xd1\x15\xd9\x28\xa5\x04\xa6\x68\xb4\x05\x6e\xd1\x82\x28\xb1\xa7\xa1\x95\x15\x7e\x70\x46\xf6\xae\x27\x47\xd7\x13\xdf\x94\xf2\x89\x6d\xc7\xab\xd8\x3f\x4f\x75\xf3\x1a\x55\x0a\xc3\x63\x44\x76\xaa\x67\x80\xd3\x0f\x28\xdf\x75\xa4\xda\xba\x14\xa9\x33\x52\x41\x8b\xa6\x02\xbf\xcd\xfb\x1d\x7e\xae\x97\x87\x5c\x7b\x55\x55\xd7\x8d\xea\xdc\xf0\xa5\xb1\xb9\xe3\xd7\x23\x7b\x10\x76\x35\x09\x03\x75\x5c\x49\xb7\xdf\xb9\x5e\x44\x2f\x6d\x56\x7e\xba\x1d\xa7\x47\xf6\x8c\x75\x81\x80\x0c\x40\xb5\xa5\x98\xa2\xb8\xed\xf1\xa0\xa4\x81\x7f\x9e\xd8\xf3\x7d\x8d\xa2\xd7\x63\xc6\x88\x8e\xcc\xd3\x5e\xd4\x2d\x31\x46\xec\xe8\x98\xf8\x51\xe9\x65\xd7\x8f\x73\xfb\x76\x10\x53\xd3\x85\xd1\xf6\x7d\xe5\x53\x9a\x45\xa9\x8f\xe3\x35\x23\x75\x52\xbf\x45\x00\x56\xe3\x9f\xd0\xbf\xe5\x22\x2a\x3b\xd5\xb3\x50\x15\x28\xf4\x72\x92\x63\x1c\xf8\x8c\x15\xad\x8d\x2b\xf9\x67\x32\xdb\x60\x2c\x72\xfc\x31\x32\x1f\x19\x83\x32\xf2\xa9\xa3\xeb\x46\x99\x30\xdc\x7c\x2d\xcb\x80\x26\x45\x10\x11\x1d\x67\x62\x42\x38\x13\xb3\x06\xfc\xe6\xd9\xa9\xff\x7b\xf1\xba\x93\x0d\xf0\xe4\xcd\xd3\x8f\x9f\xe1\xa7\x32\x18\xa0\x08\xe7\xe6\xc7\xf3\x1a\xba\xe5\x98\xc5\xbf\xcd\xe0\x4e\x78\x70\x20\x23\xb7\x98\xef\xd6\x7b\xf3\x49\xfe\xe5\x7a\x32\xfe\x09\x95\x7c\x40\xcf\x1d\xea\x29\xc8\xca\x1f\xe8\xa4\xd2\xf1\x92\xdd\xa1\x52\xa9\x15\x2d\xe1\x53\x83\x7f\x62\xc5\xdb\xdb\x96\xb0\x2d\x61\xc5\xee\xed\x75\x4b\x76\xcf\x22\xd3\x9c\x89\x1c\x8a\xc2\x19\x6c\x0c\x8b\xae\x26\x14\x67\x1d\x86\x05\x2b\x0e\xff\xe5\xb4\x6d\xc1\xeb\x59\x46\xde\xe2\x19\xfc\x1d\x3e\x5e\x27\x27\x84\xfc\x41\xf9\xc5\x1e\x7c\x9f\x01\xf2\xfd\x88\x17\xf0\xff\x72\x90\xa2\x4e\xc6\xd0\xf1\x6b\xf4\x47\x1e\x58\x5e\x6b\x77\x0b\x7f\x38\x1c\x72\x71\xd9\xf2\xfc\x85\xb9\x7e\xe1\x92\xb9\x1d\x65\x26\x8c\x0e\x91\x86\x78\x31\x40\xe3\xc5\xc1\x97\x0a\x93\x21\x46\x0f\x5f\x03\xed\xc7\x40\x7f\xfd\x1b\x00\x00\xff\xff\xe4\xec\xe4\xda\xbe\x05\x00\x00"

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 1470, mode: os.FileMode(420), modTime: time.Unix(1562268595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"close.svg": closeSvg,
	"edit.html": editHtml,
	"edit.js": editJs,
	"links.html": linksHtml,
	"style.css": styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"close.svg": &bintree{closeSvg, map[string]*bintree{}},
	"edit.html": &bintree{editHtml, map[string]*bintree{}},
	"edit.js": &bintree{editJs, map[string]*bintree{}},
	"links.html": &bintree{linksHtml, map[string]*bintree{}},
	"style.css": &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

